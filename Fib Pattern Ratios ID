#notes: need:
1. doubletop
2. Double Drive 1:1 into a 1:1 Correction: 
3. triple top and bottom


1:1 Balance
def xcd_ = if xcd>=(.382-tolerance) and xcd<= (.618+tolerance) then 1  else Double.NaN;
def bcd_ = if !isnan(xcd_) and bcd>=(.382-tolerance) and bcd<= (.618+tolerance) then 1  else Double.NaN;
def xab_ = if !isnan(bcd_) and xab>=(.382-tolerance) and xab<= (.618+tolerance) then 1  else Double.NaN;
def op13 = !isnan(xab_)  ; ## balance rule

#threedrives
def three_xab = if xab >= 1.13 and xab <= 1.618 then 1  else Double.NaN;
def three_abc = if abc >= 0.50 and abc <= 0.786 then 1  else Double.NaN;
def three_bcd = if bcd >= 1.13 and bcd <= 1.618 then 1 else Double.NaN;
def three_xad = if xad >= 1.27 and xad <= 2.618 then 1 else Double.NaN;
def op4 = !IsNaN(three_xab) and !IsNaN(three_abc)  and !IsNaN(three_bcd) and !IsNaN(three_xad);

ABCD and ABCD Reciprical
def xcd_ = if  xcd >= .382 and xcd <= .618 or  xad >= .382 and xad <= .618 then 1 else Double.NaN;
def ABCD_abc = if abc >= 0.382 and abc <= 0.886 then 1  else Double.NaN;
def ABCD_bcd = if bcd >= 1.13 and bcd <= 2.618 then 1  else Double.NaN;
            def op1 =  !IsNaN(ABCD_abc) && !IsNaN(ABCD_bcd) && !IsNaN(xcd_ );
def ABCD_abcR = if abc >= 1.13 and abc <= 3.618 then 1  else Double.NaN;
def ABCD_bcdR = if bcd >= .382 and bcd <= .886 then 1  else Double.NaN;
        def op2 =  !IsNaN(ABCD_abcR) && !IsNaN(ABCD_bcdR) && !IsNaN(xcd_ );
head and shoulders
def hns_xab = if xab >= 1.13 and xab <= 3.618 then 1  else Double.NaN;
def hns_abc = if abc >= 0.01 and abc <= 10000 then 1  else Double.NaN;
def hns_bcd = if bcd >= .01 and bcd <= .98 then 1 else Double.NaN;
def hns_xad = if xad >= .886 and xad <= 1.12 then 1 else Double.NaN;
def op8 = !IsNaN(hns_xab) and !IsNaN(hns_abc)  and !IsNaN(hns_bcd) and !IsNaN(hns_xad);

#rectangle
def rect_xab = if xab >= .382 and xab <= .618 then 1  else Double.NaN;
def rect_abc = if abc >= .88 and abc <= 1.12 then 1  else Double.NaN;
def rect_bcd = if bcd >= .88 and bcd <= 1.12 then 1  else Double.NaN;
def rect_xad2 = if xad>= .382 and xad<= .618 then 1  else Double.NaN;
            def op9 = !IsNaN(rect_xab) and !IsNaN(rect_abc)  and !IsNaN(rect_bcd) and !IsNaN(rect_xad2);
						
		def raw1d_ = if    w1d >= 1.272 and w1d <= 1.618 then 1  else  Double.NaN;
def raw2d_ = if !IsNaN(raw1d_) and w2d >= .618 and w2d <= .886 then 1  else  Double.NaN;
def raw3d_ = if !IsNaN(raw2d_) and w3d >= 1.27 and w3d <= 1.618 then 1  else  Double.NaN;
def raw4d_ = if !IsNaN(raw3d_) and w4d >= .618 and w4d <= .886 then 1  else  Double.NaN;
def waveExpanding= !IsNaN(raw4d_);
def raw1c_ = if    w1d >= .618 and w1d <= .786 then 1  else  Double.NaN;
def raw2c_ = if !IsNaN(raw1c_) and w2d >= .236 and w2d <= .618 then 1  else  Double.NaN;
def raw3c_ = if !IsNaN(raw2c_) and w3d >= .786 and w3d <= .9999 then 1  else  Double.NaN;
def raw4c_ = if !IsNaN(raw3c_) and w4d >= .50 and w4d <= .886 then 1  else  Double.NaN;
def waveContracting = !IsNaN(raw4c_);
def triangle = waveExpanding or waveContracting;	

##wedge
def A_DASC_xab = if xab >= .318 and xab <= 1.13 then 1  else Double.NaN;
def A_DASC_abc = if abc >= .886 and abc <= 1.13 then 1  else Double.NaN;
def A_DASC_bcd = if bcd >= .886 and bcd <= 1.13 then 1 else Double.NaN;
def A_DASC_xad = if xad >= .318 and xad <= .618 then 1 else Double.NaN;
def op10 = !IsNaN(A_DASC_xab) and !IsNaN(A_DASC_abc)  and !IsNaN(A_DASC_bcd) and !IsNaN(A_DASC_xad);









						
